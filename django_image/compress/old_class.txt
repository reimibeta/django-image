
# class ResizeImage:
#
#     def resize(self, size, image, name=None):
#         # if isinstance(size, int):
#         #     self.dimension = CompressDimension(size)
#         # else:
#         #     print(len(tuple(size)))
#         # self.dimension = CompressDimension(size)
#         # self.image_file = Image.open(image).convert('RGB')
#         compress_image = CompressImage(image, size)
#         compress_image.compress()
#         compress_image.save_file()
#         return compress_image.name(image, name)
#         # self._compress()
#         # self._save_file()
#         # return self._return_name(name)
#
#
# resize_image = ResizeImage()
# class compress_image:
#
#     def image(self, image, name=None, width=400, height=None):
#         # Opening the uploaded image
#         im = Image.open(image).convert('RGB')
#         output = BytesIO()
#         # Resize/modify the image
#         width_percent = (width / float(im.size[0]))
#         height_size = int((float(im.size[1]) * float(width_percent)))
#         if not height:
#             im = im.resize((width, height_size), Image.ANTIALIAS)
#         else:
#             im = im.resize((width, height), Image.ANTIALIAS)
#         # after modifications, save it to the output
#         # im = im.rotate(90, expand=True)
#         im.save(output, format='JPEG', quality=100)
#         # If no ExifTags, no rotating needed.
#         output.seek(0)
#
#         # change the imagefield value to be the newley modifed image value image.name.split('.')[0]
#         if not name:
#             name = uuid.uuid4().hex[:8].upper()
#         img = InMemoryUploadedFile(output, 'ImageField', "{}{}".format(name, self.ext(image)), 'image/jpeg',
#                                    sys.getsizeof(output), None)
#         return img
#
#     @staticmethod
#     def ext(image):
#         return os.path.splitext(image.name)[1]
